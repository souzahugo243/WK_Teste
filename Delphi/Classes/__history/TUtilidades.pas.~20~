unit TUtilidades;
{
  Inicio       Autor  Motivo / Assunto
  05/11/2020   Hugo   Classe criada para ajudar com algumas validacoes e
                      localizações de dados.
}
interface
uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, U_ModeloConsulta1, Data.DB,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  Vcl.StdCtrls, Vcl.Buttons, Vcl.ExtCtrls, Vcl.Grids, Vcl.DBGrids, System.UITypes, Datasnap.DBClient;

 type
 {}
    TUtilidadesDia = class(TObject)

    private
    { Declarações Privadas }

    public
    { Declarações Públicas }
     procedure GravaItensPedido(const ADataSet : TClientDataSet; ANumeroPedido: Real);
     function  localizaNomeCliente(const ACodigoCliente : Real): String;
     function  localizaNomeProduto(const ACodigoProduto : Real): String;
     function  GravaPedido(const ANumeroPedido, ACodigoCliente, AValorTotal: Real): Boolean;
    end;

implementation

uses
   DataModuleConexao;
{ TUtilidadesDia }

function TUtilidadesDia.GravaPedido(const ANumeroPedido, ACodigoCliente,
  AValorTotal: Real): Boolean;
begin
  try
   Result := False;
   if not DTM_Conexao.Conexao.InTransaction then
    DTM_Conexao.Conexao.StartTransaction;

    with TFDQuery.Create(nil) do
    begin
     try
      Connection := DTM_Conexao.Conexao;
      SQL.Add(' INSERT INTO DADOS_GERAIS_PEDIDO(NUMERO_PEDIDO,    ' +
              '                                 CODIGO_CLIENTE,   ' +
              '                                 VALOR_TOTAL)      ' +
              '                          VALUES(:NUMERO_PEDIDO,   ' +
              '                                 :CODIGO_CLIENTE,  ' +
              '                                 :VALOR_TOTAL)     ' );
      ParamByName('NUMERO_PEDIDO').AsFloat  := ANumeroPedido;
      ParamByName('CODIGO_CLIENTE').AsFloat := ACodigoCliente;
      ParamByName('VALOR_TOTAL').AsFloat    := AValorTotal;
      ExecSQL;
      Result := True;
     finally
      Free;
     end;
    end;

  DTM_Conexao.Conexao.Commit;
  except
  on E: Exception do
    begin
      DTM_Conexao.Conexao.Rollback;
      ShowMessage('Ocorreu um Erro Ao Gravar o Pedido: ' + E.Message );
    Abort;
    end;
  end;
end;

function TUtilidadesDia.localizaNomeCliente(const ACodigoCliente: Real): String;
begin
 Result := EmptyStr;
 with TFDQuery.Create(Nil) do
 begin
   try
    Connection := DTM_Conexao.Conexao;
    SQL.Add(' SELECT NOME             ' +
            '   FROM CLIENTES         ' +
            '  WHERE CODIGO = :CODIGO ');
    ParamByName('CODIGO').AsFloat := ACodigoCliente;
    Open;
    Result := Fields[0].AsString;
   finally
    Free;
   end;
 end;
end;

function TUtilidadesDia.localizaNomeProduto(const ACodigoProduto: Real): String;
begin
 Result := EmptyStr;
 with TFDQuery.Create(Nil) do
 begin
   try
    Connection := DTM_Conexao.Conexao;
    SQL.Add(' SELECT DESCRICAO        ' +
            '   FROM PRODUTOS         ' +
            '  WHERE CODIGO = :CODIGO ');
    ParamByName('CODIGO').AsFloat := ACodigoProduto;
    Open;
    Result := Fields[0].AsString;
   finally
    Free;
   end;
 end;
end;

end.
